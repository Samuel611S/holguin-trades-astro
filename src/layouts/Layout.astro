---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { siteData } from '../data/site';
import { footerData } from '../data/footer';

export interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  noIndex?: boolean;
  canonicalUrl?: string;
}

const isHomePage = Astro.url.pathname === '/' || Astro.url.pathname === '';

const {
  title = isHomePage ? siteData.homepage.title : siteData.businessName,
  description = isHomePage ? siteData.homepage.description : siteData.description,
  ogImage = siteData.seo.ogImage,
  noIndex = false,
  canonicalUrl,
} = Astro.props;

const fullTitle = isHomePage
  ? siteData.homepage.title
  : title === siteData.businessName
  ? title
  : `${title} | ${siteData.businessName}`;

const baseUrl = Astro.site?.href || siteData.baseUrl;
const fullOgImage = ogImage.startsWith('http') ? ogImage : `${baseUrl}${ogImage}`;
const canonical = canonicalUrl || `${baseUrl}${Astro.url.pathname}`;

const ogTitle = isHomePage ? siteData.homepage.ogTitle : fullTitle;
const ogDescription = isHomePage ? siteData.homepage.ogDescription : description;
const twitterTitle = isHomePage ? siteData.homepage.twitterTitle : fullTitle;
const twitterDescription = isHomePage ? siteData.homepage.twitterDescription : description;

const animatedDots = Array.from({ length: 50 }, (_, i) => ({
  id: i,
  size: Math.random() * 3 + 1,
  top: Math.random() * 100,
  left: Math.random() * 100,
  delay: Math.random() * 5,
  duration: Math.random() * 3 + 2
}));
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonical} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Poppins:wght@300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />

    <title>{fullTitle}</title>

    <meta property="og:title" content={ogTitle} />
    <meta property="og:description" content={ogDescription} />
    <meta property="og:image" content={fullOgImage} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:site_name" content={siteData.businessName} />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={twitterTitle} />
    <meta name="twitter:description" content={twitterDescription} />
    <meta name="twitter:image" content={siteData.seo.twitterImage} />
    <meta name="twitter:site" content={siteData.social.twitterHandle} />
    <meta name="twitter:creator" content="@AlfredoHolguin" />

    <meta name="author" content={siteData.author} />
    <meta name="keywords" content={siteData.keywords.join(', ')} />
    <meta name="theme-color" content="#111827" />

    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": siteData.businessName,
      "description": siteData.description,
      "url": baseUrl,
      "logo": `${baseUrl}/favicon.svg`,
      "founder": {
        "@type": "Person",
        "name": siteData.author
      },
      "sameAs": [
        siteData.social.twitter,
        siteData.social.youtube,
        siteData.social.discord
      ]
    })} />
  </head>

  <body class="bg-gray-900 text-white min-h-screen font-sans antialiased bg-loading">
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-600 text-white px-4 py-2 rounded-md z-50"
    >
      Skip to main content
    </a>

    <div class="relative bg-gray-900 min-h-screen overflow-hidden">

      <!-- ðŸŒŒ Background Layer (fixed behind content) -->
      <div class="fixed inset-0 z-[-1] pointer-events-none select-none" aria-hidden="true">
        <div class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-slate-900 opacity-80"></div>

        <div class="absolute inset-0 overflow-hidden">
          {animatedDots.map((dot) => (
            <div
              key={dot.id}
              class="absolute rounded-full bg-primary-500/20 animate-pulse-glow animate-dots"
              style={`width: ${dot.size}px; height: ${dot.size}px; top: ${dot.top}%; left: ${dot.left}%; animation-delay: ${dot.delay}s; animation-duration: ${dot.duration}s;`}
            />
          ))}
        </div>

        <div class="absolute bottom-0 left-0 right-0 h-64 overflow-hidden opacity-10">
          <svg class="absolute bottom-0 left-0 w-full h-full animate-wave" viewBox="0 0 1200 120" preserveAspectRatio="none">
            <defs>
              <linearGradient id="waveGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#3b82f6;stop-opacity:0.3" />
                <stop offset="100%" style="stop-color:#1d4ed8;stop-opacity:0.1" />
              </linearGradient>
            </defs>
            <path
              d="M0,120 C150,100 350,0 600,60 C850,120 1050,60 1200,80 L1200,120 Z"
              fill="url(#waveGradient)"
            />
          </svg>
        </div>
      </div>

      <!-- âœ¨ Foreground Content -->
      <div class="relative z-10">
        <Header />
        <main id="main-content" class="min-h-screen" role="main">
          <slot />
        </main>
        <Footer />
      </div>
    </div>

    <!-- Scripts -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const element = entry.target;
              const animationClass = element.dataset.animation || 'animate-fade-in';
              requestAnimationFrame(() => {
                element.classList.add(animationClass);
                element.classList.remove('opacity-0');
              });
              observer.unobserve(element);
            }
          });
        }, observerOptions);

        document.querySelectorAll('.reveal-on-scroll').forEach(el => {
          observer.observe(el);
        });

        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
              target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          });
        });

        setTimeout(() => {
          document.body.classList.remove('bg-loading');
        }, 100);
      });
    </script>

    <script>
      if ('serviceWorker' in navigator && location.hostname !== 'localhost') {
        navigator.serviceWorker.register('/sw.js').catch(err => {
          console.log('Service Worker registration failed:', err);
        });
      }
    </script>
  </body>
</html>
